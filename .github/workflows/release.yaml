name: Create Release (manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.2.3 or 1.2.3.4)"
        required: true
      ai_rewrite:
        description: "Use AI to polish release notes (English)"
        required: false
        default: 'true'
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: 'false'

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: manual-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare_and_release:
    name: Validate, generate notes, and publish release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format and uniqueness
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ inputs.version }}"
          # Allow 2-, 3-, or 4-part numeric versions (e.g., 1.2, 1.2.3, 1.2.3.4)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+(\.[0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version: $VERSION. Use 2 to 4 numeric parts (e.g., 1.2, 1.2.3, or 1.2.3.4)." >&2
            exit 1
          fi
          git fetch --tags --quiet
          if git rev-parse -q --verify "refs/tags/$VERSION" >/dev/null; then
            echo "Tag $VERSION already exists. Choose a new version." >&2
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate default release notes (GitHub)
        id: gen_notes
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.VERSION;
            // Ask GitHub to generate release notes text (English, includes PRs & commits)
            const notes = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              target_commitish: context.sha
            });
            core.setOutput('body', notes.data.body || '');
          result-encoding: string
        env:
          VERSION: ${{ steps.validate.outputs.version }}

      - name: Ensure OpenAI key when AI enabled
        if: ${{ inputs.ai_rewrite == 'true' && secrets.OPENAI_API_KEY == '' }}
        run: |
          echo "ai_rewrite is enabled but OPENAI_API_KEY is not set" >&2
          exit 1

      - name: Rewrite notes via OpenAI
        id: ai_openai
        if: ${{ inputs.ai_rewrite == 'true' && secrets.OPENAI_API_KEY != '' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RAW_NOTES: ${{ steps.gen_notes.outputs.body }}
        shell: bash
        run: |
          set -euo pipefail
          # Use requested default model; allow override via OPENAI_MODEL secret/env
          MODEL="${OPENAI_MODEL:-gpt-5-mini}"
          PROMPT=$(cat << 'EOF'
          Rewrite the following GitHub release notes into a clear, concise, user-friendly English changelog.
          - Keep technical accuracy.
          - Group related changes.
          - Prefer imperative bullet points.
          - Include notable PRs/issues in parentheses when helpful.
          - Keep it under ~60 lines.
          ---
          EOF
          )
          BODY=$(jq -Rs . <<< "$PROMPT$RAW_NOTES")
          RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\n              \"model\": \"$MODEL\",\n              \"messages\": [\n                {\"role\": \"system\", \"content\": \"You are an expert technical writer.\"},\n                {\"role\": \"user\", \"content\": $BODY}\n              ],\n              \"temperature\": 0.2\n            }")
          POLISHED=$(echo "$RESP" | jq -r '.choices[0].message.content // empty')
          if [ -z "$POLISHED" ]; then
            echo "AI rewrite failed; refusing to fall back (per policy)" >&2
            exit 1
          fi
          ATTR_NOTE=$'\n\nNote: These release notes were AI-generated from commits and pull requests.'
          {
            echo "body<<__NOTES__"
            echo "$POLISHED$ATTR_NOTE"
            echo "__NOTES__"
          } >> "$GITHUB_OUTPUT"
      - name: Create GitHub Release (AI)
        id: create_release_ai
        if: ${{ inputs.ai_rewrite == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.validate.outputs.version }}
          release_name: ${{ steps.validate.outputs.version }}
          draft: false
          prerelease: ${{ fromJSON(inputs.prerelease) }}
          body: ${{ steps.ai_openai.outputs.body }}

      - name: Create GitHub Release
        id: create_release_plain
        if: ${{ inputs.ai_rewrite != 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.validate.outputs.version }}
          release_name: ${{ steps.validate.outputs.version }}
          draft: false
          prerelease: ${{ fromJSON(inputs.prerelease) }}
          body: ${{ steps.gen_notes.outputs.body }}

      - name: Summary
        run: |
          echo "Created release ${{ steps.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Release URL: ${{ steps.create_release_ai.outputs.html_url || steps.create_release_plain.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
