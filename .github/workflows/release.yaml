name: Create Release (manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.2.3 or 1.2.3.4)"
        required: true
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: 'false'

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: manual-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare_and_release:
    name: Validate, generate notes, and publish release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format and uniqueness
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ inputs.version }}"
          # Allow 2-, 3-, or 4-part numeric versions (e.g., 1.2, 1.2.3, 1.2.3.4)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+(\.[0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version: $VERSION. Use 2 to 4 numeric parts (e.g., 1.2, 1.2.3, or 1.2.3.4)." >&2
            exit 1
          fi
          git fetch --tags --quiet
          if git rev-parse -q --verify "refs/tags/$VERSION" >/dev/null; then
            echo "Tag $VERSION already exists. Choose a new version." >&2
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          # Determine previous tag for accurate note range, if any
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
          echo "prev_tag=$PREV_TAG" >> "$GITHUB_OUTPUT"

      - name: Generate default release notes (GitHub)
        id: gen_notes
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.VERSION;
            const prev = process.env.PREV_TAG;
            // Ask GitHub to generate release notes text (English, includes PRs & commits)
            const payload = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              target_commitish: context.sha,
            };
            if (prev) payload.previous_tag_name = prev;
            const notes = await github.rest.repos.generateReleaseNotes(payload);
            core.setOutput('body', notes.data.body || '');
          result-encoding: string
        env:
          VERSION: ${{ steps.validate.outputs.version }}
          PREV_TAG: ${{ steps.validate.outputs.prev_tag }}

      # Build and push images as part of this workflow
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            laitco/tailscale-healthcheck
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.validate.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.validate.outputs.version }}

      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.validate.outputs.version }}
          release_name: ${{ steps.validate.outputs.version }}
          draft: false
          prerelease: ${{ fromJSON(inputs.prerelease) }}
          body: ${{ steps.gen_notes.outputs.body }}

      - name: Summary
        run: |
          echo "Created release ${{ steps.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
